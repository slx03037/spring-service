spring:
  main:
    allow-bean-definition-overriding: true
    #############水平分表################
  sharding-sphere:
    datasource: #数据源配置
      names: ds1
      ds1: #数据源0
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://192.168.1.73:3306/sharding_sphere_db1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        username: root
        password: NJben@1234
    rules:
      sharding:
        tables:
          # 逻辑表名称
          tbl_order_info:
            # 行表达式标识符可以使用 ${...} 或 $->{...}，但前者与 Spring 本身的属性文件占位符冲突，因此在 Spring 环境中使用行表达式标识符建议使用 $->{...}
            actual-data-nodes: ds1.tbl_order_info_$->{1..4}
            # 分表策略
            table-strategy:
              standard:
                # 分片列名称
                sharding-column: order_type
                # 分片算法名称
                sharding-algorithm-name: table-inline
        # 分片算法配置
        sharding-algorithms:
          table-inline:
            # 分片算法类型
            type: INLINE
            props:
              # 分片算法的行表达式
              algorithm-expression: tbl_order_info_$->{order_type % 4+1}
#    sharding:
#      tables:
#        tbl_order_info:
#          actual-data-nodes: ds1.tbl_order_info_$->{1..4}   #指定orders表的分布情况，配置表在哪个数据库中，表名称是什么
#          # 雪花算法
#        key-generator:
#          column: order_type
#          type: SNOWFLAKE
#          ##指定分片策略。根据id的奇偶性来判断插入到哪个表
#          table-strategy:
#            inline:
#              sharding-column: id
#              algorithm-expression: ds1.tbl_order_info_$->{id % 2 +1}
        #打开sql输出日志
    props:
      sql-show: true


mybatis:
  ##config-location: classpath:/mybatis-config.xml
  mapper-locations: classpath:/mapper/**/*.xml
